sudo: required
dist: trusty
language: cpp

matrix:
  include:
    # coveralls
    - os: linux
      compiler: gcc
      addons:   
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['g++-4.9', 'ruby']
      before_script:
        - wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
        - tar xf lcov_1.11.orig.tar.gz
        - sudo make -C lcov-1.11/ install
        - gem install coveralls-lcov
        - pip install --user cpp-coveralls
      after_success:
        - make clean
        - cmake -DCOVERAGE_ENABLED=1 -DCMAKE_CXX_COMPILER=$COMPILER ..
        - make -j4
        - test/random_static_test "*"
        - test/random_thread_local_test "*"
        - test/random_local_test "*"
        - lcov --directory test --capture --output-file coverage.info --rc lcov_branch_coverage=1
        - lcov --remove coverage.info 'test/*' '/usr/*' --output-file coverage.info --rc lcov_branch_coverage=1
        - lcov --list coverage.info --rc lcov_branch_coverage=1
        - coveralls-lcov --repo-token 36YhU28qVZPPIeDBi2wHtGoOTZMeA23qw coverage.info
      env:
        - COMPILER=g++-4.9
        - SPECIAL=coveralls
        
    # linux gcc
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.9
      env: COMPILER=g++-4.9
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
      env: COMPILER=g++-5
    - os: linux
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
      env: COMPILER=g++-6
      
    # linux clang
    
    # Strange 'Exception: SegFault' on 3.6.X clang
    # (Other compilers and clang 3.7.0+ are OK)
    #- os: linux
    #  env: LLVM_VERSION=3.6.0
    #  compiler: clang

    #- os: linux
    #  env: LLVM_VERSION=3.6.1
    #  compiler: clang

    #- os: linux
    #  env: LLVM_VERSION=3.6.2
    # compiler: clang

    - os: linux
      env: LLVM_VERSION=3.7.0
      compiler: clang

    - os: linux
      env: LLVM_VERSION=3.7.1
      compiler: clang

    - os: linux
      env: LLVM_VERSION=3.8.0
      compiler: clang

    - os: linux
      env: LLVM_VERSION=3.8.1
      compiler: clang
      
    - os: linux
      env: LLVM_VERSION=3.9.0 
      compiler: clang
      
    - os: linux
      env: LLVM_VERSION=3.9.1
      compiler: clang
      
    - os: linux
      env: LLVM_VERSION=4.0.0
      compiler: clang
      
    # OSX xcode
    - os: osx
      osx_image: xcode8

    - os: osx
      osx_image: xcode8.1

    - os: osx
      osx_image: xcode8.2

    - os: osx
      osx_image: xcode8.3
      
# Build steps
script:
  - cmake --version
  - echo "Start BUILD !!!!@@@!!!@@@!!^!"
  - mkdir build
  - cd build
  - cmake -DCMAKE_CXX_COMPILER=$COMPILER ..
  - cmake --build . --config Debug
  - ctest -C Debug --output-on-failure
install:
  # create deps dir if not existing
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR}
  
  # get CMake (only for systems with brew - macOS)
  - |
     if [[ !(-x $(which cmake)) && (-x $(which brew)) ]]; then
       brew update
       brew install cmake
       cmake --version
     fi
     
  # install LLVM/clang when LLVM_VERSION is set
  - |
     if [[ "${LLVM_VERSION}" != "" ]]; then
       LLVM_DIR=${DEPS_DIR}/llvm-${LLVM_VERSION}
       if [[ -z "$(ls -A ${LLVM_DIR})" ]]; then
         travis_retry wget --quiet https://cmake.org/files/v3.6/cmake-3.6.1.tar.gz
         tar xfz cmake-3.6.1.tar.gz
         (cd cmake-3.6.1 && ./configure --prefix=${LLVM_DIR}/cmake && make install)
         export PATH="${LLVM_DIR}/cmake/bin:${PATH}"
         LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
         LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
         LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
         CLANG_URL="http://llvm.org/releases/${LLVM_VERSION}/clang+llvm-${LLVM_VERSION}-x86_64-linux-gnu-ubuntu-14.04.tar.xz"
         mkdir -p ${LLVM_DIR} ${LLVM_DIR}/build ${LLVM_DIR}/projects/libcxx ${LLVM_DIR}/projects/libcxxabi ${LLVM_DIR}/clang
         travis_retry wget --quiet -O - ${LLVM_URL}      | tar --strip-components=1 -xJ -C ${LLVM_DIR}
         travis_retry wget --quiet -O - ${LIBCXX_URL}    | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxx
         travis_retry wget --quiet -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C ${LLVM_DIR}/projects/libcxxabi
         travis_retry wget --quiet -O - ${CLANG_URL}     | tar --strip-components=1 -xJ -C ${LLVM_DIR}/clang
         (cd ${LLVM_DIR}/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_DIR}/install -DCMAKE_CXX_COMPILER=g++)
         (cd ${LLVM_DIR}/build/projects/libcxx && make install -j2)
         (cd ${LLVM_DIR}/build/projects/libcxxabi && make install -j2)
       fi
       export CXXFLAGS="-nostdinc++ -isystem ${LLVM_DIR}/install/include/c++/v1"
       export LDFLAGS="-L ${LLVM_DIR}/install/lib -l c++ -l c++abi"
       export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_DIR}/install/lib"
       export PATH="${LLVM_DIR}/clang/bin:${PATH}"
     fi
